# The module command actually needs to edit the shell environment, and is not a real executable
module = """module () {
        eval $($LMOD_CMD bash "$@")
        [ $? = 0 ] && eval $(${LMOD_SETTARG_CMD:-:} -s sh)
        }"""

# Sample info
configfile: 'config.json'

species = ["human", "chimp"]
samples = config['samples']
read_length = 150


rule all:
    input: 
        expand('analysis/{species}/{sample}/{sample}_ase_by_reads_merged.chr.txt', species=species, sample=samples)

	
def seqprep_inputs(wildcards):
    return config["samples"][wildcards.sample]

# Trim adapter sequences
rule seqprep:
    input: 
        seqprep_inputs
    output: 
        R1="analysis/{sample}/r1_trimmed.fq.gz", 
        R2="analysis/{sample}/r2_trimmed.fq.gz"
    shell: """
    /home/users/ragoglia/bin/SeqPrep/SeqPrep \
            -f {input[0]} -r {input[1]} \
            -1 {output.R1} -2 {output.R2} \
			-A GATCGGAAGAGCACACGTCT -B GATCGGAAGAGCGTCGTGTA
    """
 

overhang = read_length - 1

# Generate STAR genome index files
rule star_genome:
    input: 
        fasta="/scratch/users/ragoglia/reference/{species}/{species}.fasta",
        gff="/scratch/users/ragoglia/reference/{species}/{species}.gff"
    threads: 12
    output:
        "/scratch/users/ragoglia/reference/{species}/STAR/Genome"
    shell: """ {module}; module load STAR/2.5.1b;
    rm -rf /scratch/users/ragoglia/reference/{wildcards.species}/STAR/tmp
    STAR \
            --runThreadN {threads} \
            --runMode genomeGenerate \
            --genomeDir /scratch/users/ragoglia/reference/{wildcards.species}/STAR \
            --genomeFastaFiles {input.fasta} \
            --sjdbGTFfile {input.gff} \
            --sjdbOverhang {overhang} \
            --outTmpDir /scratch/users/ragoglia/reference/{wildcards.species}/STAR/tmp
    """

# Map reads with STAR (first pass)	
rule star_align:
    input: 
        R1="analysis/{sample}/r1_trimmed.fq.gz", R2="analysis/{sample}/r2_trimmed.fq.gz",
        genome="/scratch/users/ragoglia/reference/{species}/STAR/Genome",
    output: 
        bam="analysis/{species}/{sample}/STAR1/Aligned.out.bam",
        sj="analysis/{species}/{sample}/STAR1/SJ.out.tab"
    threads: 10
    params: mem="64G"
    shell: """
    {module}
    module load STAR/2.5.1b
    rm -rf analysis/{wildcards.species}/{wildcards.sample}/STAR1/STARtmp
    STAR \
            --genomeDir /scratch/users/ragoglia/reference/{wildcards.species}/STAR \
            --outFileNamePrefix analysis/{wildcards.species}/{wildcards.sample}/STAR1/ \
            --outSAMattributes MD NH \
            --outSAMtype BAM Unsorted \
            --outTmpDir analysis/{wildcards.species}/{wildcards.sample}/STAR1/STARtmp \
            --runThreadN {threads} \
            --readFilesCommand zcat \
            --readFilesIn {input.R1} {input.R2} \
			--outFilterMultimapNmax 1
    """
 
# Map reads with STAR (second pass, incorporates splice junctions idetified in previous step)
rule star_align2:
    input: 
        R1="analysis/{sample}/r1_trimmed.fq.gz", R2="analysis/{sample}/r2_trimmed.fq.gz",
        genome="/scratch/users/ragoglia/reference/{species}/STAR/Genome",
        sj="analysis/{species}/{sample}/STAR1/SJ.out.tab"
    output: 
        "analysis/{species}/{sample}/STAR2/Aligned.out.bam"
    threads: 10
    params: mem="64G"
    shell: """ {module}; module load STAR/2.5.1b;
    rm -rf analysis/{wildcards.species}/{wildcards.sample}/STAR2/STARtmp
    STAR \
            --genomeDir /scratch/users/ragoglia/reference/{wildcards.species}/STAR \
            --outFileNamePrefix analysis/{wildcards.species}/{wildcards.sample}/STAR2/ \
            --outSAMattributes MD NH \
            --outSAMtype BAM Unsorted \
            --outTmpDir analysis/{wildcards.species}/{wildcards.sample}/STAR2/STARtmp \
            --runThreadN {threads} \
            --readFilesCommand zcat \
            --readFilesIn {input.R1} {input.R2} \
			--outFilterMultimapNmax 1 \
			--sjdbFileChrStartEnd {input.sj}
    """

# Sort by coordinate	
rule sort:
    input: 
        "analysis/{genome}/{sample}/STAR2/Aligned.out.bam"
    output:
        "analysis/{genome}/{sample}/STAR2/Aligned.out.sort.bam"
    shell: """ {module}; module load samtools/1.3;
    samtools sort \
        {input} -o {output}
    """

# Remove duplicates with samtools, randomize which duplicate gets discareded
rule rmdup:
     input: "analysis/{species}/{sample}/STAR2/Aligned.out.sort.bam"
     output: "analysis/{species}/{sample}/rmdup.bam"
     shell: """
     python ~/bin/Genomics/rmdup_for_ase.py \
         -i {input} -o {output} -p -s /home/users/ragoglia/bin/samtools-0.1.19/samtools
     """
	
# Index the bam file	
rule index:
    input:
        "analysis/{genome}/{sample}/rmdup.bam"
    output:
        "analysis/{genome}/{sample}/rmdup.bam.bai"
        
    shell: " {module}; module load samtools/1.3; samtools index {input}"

# First step of Hornet/WASP: extract reads that overlap SNPs	
rule wasp_find_snps:
    input: 
        bam="analysis/{genome}/{sample}/rmdup.bam",
        snpdir="/home/users/ragoglia/SNPs/ase/{genome}/wasp_split_species"
    output: 
        "analysis/{genome}/{sample}/rmdup.remap.fq1.gz",
        "analysis/{genome}/{sample}/rmdup.remap.fq2.gz",
        "analysis/{genome}/{sample}/rmdup.keep.bam",
        "analysis/{genome}/{sample}/rmdup.to.remap.bam",

    shell: """{module}; module load fraserconda/5.0;
    python find_intersecting_snps.py \
        -p -P -s\
        {input.bam} {input.snpdir}
    """

# Remap reads that overlap SNPs 	
rule wasp_remap:
    input:
        R1="analysis/{genome}/{sample}/rmdup.remap.fq1.gz",
        R2="analysis/{genome}/{sample}/rmdup.remap.fq2.gz",
        genome="/scratch/users/ragoglia/reference/{genome}/STAR/Genome",
        sj="analysis/{genome}/{sample}/STAR1/SJ.out.tab"
    output:
        "analysis/{genome}/{sample}/rmdup.remap.bam",
    threads: 10
    shell: """{module}; module load STAR/2.5.1b;
    rm -rf analysis/{wildcards.genome}/{wildcards.sample}/STARtmp
    STAR \
            --genomeDir /scratch/users/ragoglia/reference/{wildcards.genome}/STAR \
            --outFileNamePrefix analysis/{wildcards.genome}/{wildcards.sample}/remap \
            --outSAMattributes MD NH \
            --outSAMtype BAM Unsorted \
            --outTmpDir analysis/{wildcards.genome}/{wildcards.sample}/STARtmp \
            --runThreadN {threads} \
            --readFilesCommand zcat \
            --outFilterMultimapNmax 1 \
            --sjdbFileChrStartEnd {input.sj} \
            --readFilesIn {input.R1} {input.R2}
    mv analysis/{wildcards.genome}/{wildcards.sample}/remapAligned.out.bam {output}
            """
	
# Sort remapped reads by read name (contains info on where they mapped the first time)	
rule sort_wasp:
    input: 
        "analysis/{genome}/{sample}/rmdup.remap.bam"
    output:
        "analysis/{genome}/{sample}/rmdup.remap.sort.bam"
    shell: """ {module}; module load samtools/1.3; 
    samtools sort \
        -n \
        {input} -o {output}
    """

# Second step of WASP, only keep reads that mapped to the same place
rule wasp_filter:
    input: 
        toremap="analysis/{genome}/{sample}/rmdup.to.remap.bam",
        remapped="analysis/{genome}/{sample}/rmdup.remap.sort.bam",
    output:
        "analysis/{genome}/{sample}/rmdup.remap.kept.bam",

    shell:""" {module}; module load fraserconda/5.0;
    python /home/users/ragoglia/bin/Hornet/mapping/filter_remapped_reads.py \
        -p \
        {input.toremap} {input.remapped} \
        {output}
    """

# Sort the retained reads that overlap SNPs           
rule sort_ase:
    input: 
        "analysis/{genome}/{sample}/rmdup.remap.kept.bam"
    output:
        "analysis/{genome}/{sample}/rmdup.remap.kept.sort.bam"
    shell: """ {module}; module load samtools/1.3; 
    samtools sort \
        {input} -o {output}
    """

# Sort the kept reads that did not overlap SNPs	
rule sort_keep:
    input: 
        "analysis/{genome}/{sample}/rmdup.keep.bam"
    output:
        "analysis/{genome}/{sample}/rmdup.keep.sort.bam"
    shell: """ {module}; module load samtools/1.3; 
    samtools sort \
        {input} -o {output}
    """
 
# Merge all the retained SNPs into one bam file
rule wasp_merge:
    input:
        "analysis/{genome}/{sample}/rmdup.remap.kept.sort.bam",
        "analysis/{genome}/{sample}/rmdup.keep.sort.bam",
    output:
        "analysis/{genome}/{sample}/rmdup.remap.kept.merged.bam"
    shell:
        "{module}; module load samtools/1.3; samtools merge {output} {input}"

# Index the reads
rule index_ase:
    input:
        "analysis/{genome}/{sample}/rmdup.remap.kept.merged.bam"
    output:
        "analysis/{genome}/{sample}/rmdup.remap.kept.merged.bam.bai"
        
    shell: " {module}; module load samtools/1.3; samtools index {input}"

# Count allelic expression with ASEr	
rule count_ase:
    input:
        snps="/home/users/ragoglia/SNPs/ase/{genome}/ASE_SNPs.FILTER.SPLIT_SPECIES.bed",      
        gff="/scratch/users/ragoglia/reference/{genome}/{genome}.chr.gff",
        reads="analysis/{genome}/{sample}/rmdup.remap.kept.merged.bam",
        readsidx="analysis/{genome}/{sample}/rmdup.remap.kept.merged.bam.bai",
    conda:"/home/users/ragoglia/envs/test.yml" 
    output:
        "analysis/{genome}/{sample}/{sample}_ase_by_reads_merged.chr.txt"
    shell: """python ~/bin/ASEr/bin/GetGeneASEbyReads.py \
        {input.snps} {input.gff} {input.reads}\
        -o {output}
    """

